Index: src/test/java/LiDarTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import bgu.spl.mics.application.messages.DetectObjectsEvent;\r\nimport bgu.spl.mics.application.objects.*;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\nimport static org.junit.jupiter.api.Assertions.assertTrue;\r\n\r\npublic class LiDarTest {\r\n\r\n    private LiDarWorkerTracker lidarWorker;\r\n    private List<StampedCloudPoints> cloudPoints;\r\n\r\n    @BeforeEach\r\n    public void setUp() {\r\n\r\n        // Reset the data in LiDarDataBase\r\n        LiDarDataBase.getInstance().getCloudPoints().clear();\r\n\r\n        // Initialize mock data for LiDarDataBase\r\n        cloudPoints = new LinkedList<>();\r\n        cloudPoints.add(new StampedCloudPoints( \"Wall_1\",1, Arrays.asList(Arrays.asList(1.0, 2.0), Arrays.asList(2.0, 3.0))));\r\n        cloudPoints.add(new StampedCloudPoints( \"Door_1\",2, Arrays.asList(Arrays.asList(3.0, 4.0))));\r\n        LiDarDataBase.getInstance().getCloudPoints().addAll(cloudPoints);\r\n\r\n        // Initialize LiDarWorkerTracker\r\n        lidarWorker = new LiDarWorkerTracker(1, 1);\r\n    }\r\n\r\n    @Test\r\n    public void testHandleTick_ValidTracking() {\r\n        TrackedObject trackedObject1 = new TrackedObject(\"Wall_1\", 1, \"Wall\", Arrays.asList(new CloudPoint(1.0, 2.0)));\r\n        TrackedObject trackedObject2 = new TrackedObject(\"Door_1\", 2, \"Door\", Arrays.asList(new CloudPoint(3.0, 4.0)));\r\n        lidarWorker.addTrackedObject(trackedObject1);\r\n        lidarWorker.addTrackedObject(trackedObject2);\r\n\r\n        List<TrackedObject> result = lidarWorker.handleTick(3);\r\n\r\n        assertEquals(1, result.size(), \"Should track 1 object at tick 2\");\r\n        assertEquals(\"Door_1\", result.get(0).getId(), \"Tracked object ID should match\");\r\n        assertEquals(STATUS.UP, lidarWorker.getStatus(), \"LiDar status should remain UP\");\r\n    }\r\n\r\n    @Test\r\n    public void testHandleTick_LiDarDown() {\r\n        TrackedObject trackedObject = new TrackedObject(\"Wall_1\", 1, \"Wall\", Arrays.asList(new CloudPoint(1.0, 2.0)));\r\n        TrackedObject trackedObject2 = new TrackedObject(\"Door_1\", 2, \"Door\", Arrays.asList(new CloudPoint(3.0, 4.0)));\r\n\r\n        lidarWorker.addTrackedObject(trackedObject);\r\n        lidarWorker.addTrackedObject(trackedObject2);\r\n\r\n        lidarWorker.handleTick(1);\r\n        lidarWorker.handleTick(2);\r\n        lidarWorker.handleTick(3);\r\n\r\n\r\n        assertEquals(STATUS.DOWN, lidarWorker.getStatus(), \"LiDar status should be DOWN after finishing all objects\");\r\n    }\r\n\r\n    @Test\r\n    public void testHandleDetectObjects_ValidDetection() {\r\n        StampedDetectedObjects stampedObjects = new StampedDetectedObjects(1, Arrays.asList(new DetectedObject(\"Wall_1\", \"Wall\")));\r\n        DetectObjectsEvent event = new DetectObjectsEvent(\"camera\",stampedObjects);\r\n\r\n        lidarWorker.handleDetectObjects(event);\r\n        List<TrackedObject> result = lidarWorker.getLastTrackedObjects();\r\n\r\n        assertEquals(1, result.size(), \"Should detect 1 object\");\r\n        assertEquals(\"Wall_1\", result.get(0).getId(), \"Detected object ID should match\");\r\n        assertEquals(STATUS.UP, lidarWorker.getStatus(), \"LiDar status should remain UP\");\r\n    }\r\n\r\n    @Test\r\n    public void testHandleDetectObjects_LiDarError() {\r\n        StampedDetectedObjects stampedObjects = new StampedDetectedObjects(0, Arrays.asList(new DetectedObject(\"ERROR\", \"Fault\")));\r\n        DetectObjectsEvent event = new DetectObjectsEvent(\"camera\",stampedObjects);\r\n        LiDarDataBase.getInstance().getCloudPoints().add(new StampedCloudPoints(\"ERROR\", 0,Arrays.asList(Arrays.asList(3.0, 4.0))));\r\n\r\n        List<TrackedObject> result = lidarWorker.handleDetectObjects(event);\r\n\r\n        assertTrue(result.isEmpty(), \"No objects should be tracked in case of ERROR\");\r\n        assertEquals(STATUS.ERROR, lidarWorker.getStatus(), \"LiDar status should be ERROR\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/LiDarTest.java b/src/test/java/LiDarTest.java
--- a/src/test/java/LiDarTest.java	(revision 34f9a649c49d473f394e905a171fc27a6c0a6cc3)
+++ b/src/test/java/LiDarTest.java	(date 1736001051583)
@@ -56,6 +56,7 @@
         lidarWorker.handleTick(1);
         lidarWorker.handleTick(2);
         lidarWorker.handleTick(3);
+        lidarWorker.handleTick(4);
 
 
         assertEquals(STATUS.DOWN, lidarWorker.getStatus(), "LiDar status should be DOWN after finishing all objects");
Index: src/test/java/CameraTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import bgu.spl.mics.application.objects.Camera;\r\nimport bgu.spl.mics.application.objects.DetectedObject;\r\nimport bgu.spl.mics.application.objects.STATUS;\r\nimport bgu.spl.mics.application.objects.StampedDetectedObjects;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport java.util.*;\r\n\r\npublic class CameraTest {\r\n\r\n    private Camera camera;\r\n    private List<StampedDetectedObjects> detectedObjectsList;\r\n\r\n    @BeforeEach\r\n    public void setUp() {\r\n        detectedObjectsList = new LinkedList<>();\r\n        detectedObjectsList.add(new StampedDetectedObjects(1, Arrays.asList(new DetectedObject(\"Wall_1\", \"Wall\"))));\r\n        detectedObjectsList.add(new StampedDetectedObjects(2, Arrays.asList(new DetectedObject(\"Door_1\", \"Door\"))));\r\n        camera = new Camera(1, 1, detectedObjectsList);\r\n    }\r\n\r\n    @Test\r\n    public void testHandleTick_ValidDetection() {\r\n        StampedDetectedObjects result = camera.handleTick(2);\r\n\r\n        assertNotNull(result, \"Detected objects should not be null\");\r\n        assertEquals(1, result.getTime(), \"Time should match the tick\");\r\n        assertEquals(1, result.getDetectedObjects().size(), \"Should detect 1 object\");\r\n        assertEquals(\"Wall_1\", result.getDetectedObjects().get(0).getId(), \"Object ID should match\");\r\n        assertEquals(STATUS.UP, camera.getStatus(), \"Camera status should remain UP\");\r\n    }\r\n\r\n    @Test\r\n    public void testHandleTick_ErrorDetection() {\r\n        detectedObjectsList.add(new StampedDetectedObjects(3, Arrays.asList(new DetectedObject(\"ERROR\", \"Camera Disconnected\"))));\r\n        camera = new Camera(1, 1, detectedObjectsList);\r\n\r\n        camera.handleTick(4);\r\n\r\n        assertEquals(STATUS.ERROR, camera.getStatus(), \"Camera status should be ERROR\");\r\n    }\r\n\r\n    @Test\r\n    public void testHandleTick_NoDetection() {\r\n        StampedDetectedObjects result = camera.handleTick(4);\r\n\r\n        assertNull(result, \"No detection should return null\");\r\n        assertEquals(STATUS.UP, camera.getStatus(), \"Camera status should remain UP\");\r\n    }\r\n\r\n    @Test\r\n    public void testHandleTick_CameraDown() {\r\n        camera.handleTick(1);\r\n        camera.handleTick(2);\r\n        camera.handleTick(3);\r\n\r\n        assertEquals(STATUS.DOWN, camera.getStatus(), \"Camera status should be DOWN after processing all objects\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/CameraTest.java b/src/test/java/CameraTest.java
--- a/src/test/java/CameraTest.java	(revision 34f9a649c49d473f394e905a171fc27a6c0a6cc3)
+++ b/src/test/java/CameraTest.java	(date 1736001051582)
@@ -54,6 +54,7 @@
         camera.handleTick(1);
         camera.handleTick(2);
         camera.handleTick(3);
+        camera.handleTick(4);
 
         assertEquals(STATUS.DOWN, camera.getStatus(), "Camera status should be DOWN after processing all objects");
     }
Index: src/test/java/MessageBusTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import bgu.spl.mics.*;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\npublic class MessageBusTest {\r\n\r\n    private MessageBusImpl messageBus;\r\n    private MicroService m1;\r\n    private MicroService m2;\r\n\r\n    @BeforeEach\r\n    public void setUp() {\r\n        messageBus = MessageBusImpl.getInstance();\r\n        m1 = new MicroService(\"Service1\") {\r\n            @Override\r\n            protected void initialize() {}\r\n        };\r\n        m2 = new MicroService(\"Service2\") {\r\n            @Override\r\n            protected void initialize() {}\r\n        };\r\n        messageBus.register(m1);\r\n        messageBus.register(m2);\r\n    }\r\n\r\n    @Test\r\n    public void testRegisterAndUnregister() {\r\n        messageBus.unregister(m1);\r\n        assertThrows(NullPointerException.class, () -> messageBus.awaitMessage(m1));\r\n    }\r\n\r\n    @Test\r\n    public void testSubscribeEvent() {\r\n        class TestEvent implements Event<String> {}\r\n\r\n        messageBus.subscribeEvent(TestEvent.class, m1);\r\n        assertDoesNotThrow(() -> messageBus.sendEvent(new TestEvent()));\r\n    }\r\n\r\n    @Test\r\n    public void testSubscribeBroadcast() {\r\n        class TestBroadcast implements Broadcast {}\r\n\r\n        messageBus.subscribeBroadcast(TestBroadcast.class, m1);\r\n        messageBus.sendBroadcast(new TestBroadcast());\r\n\r\n        assertDoesNotThrow(() -> messageBus.awaitMessage(m1));\r\n    }\r\n\r\n    @Test\r\n    public void testSendEvent() throws InterruptedException {\r\n        class TestEvent implements Event<String> {}\r\n\r\n        messageBus.subscribeEvent(TestEvent.class, m1);\r\n        Future<String> future = messageBus.sendEvent(new TestEvent());\r\n        assertNotNull(future, \"Future should not be null\");\r\n    }\r\n\r\n    @Test\r\n    public void testSendBroadcast() throws InterruptedException {\r\n        class TestBroadcast implements Broadcast {}\r\n\r\n        messageBus.subscribeBroadcast(TestBroadcast.class, m1);\r\n        messageBus.subscribeBroadcast(TestBroadcast.class, m2);\r\n\r\n        messageBus.sendBroadcast(new TestBroadcast());\r\n\r\n        assertNotNull(messageBus.awaitMessage(m1));\r\n        assertNotNull(messageBus.awaitMessage(m2));\r\n    }\r\n\r\n    @Test\r\n    public void testComplete() {\r\n        class TestEvent implements Event<String> {}\r\n\r\n        messageBus.subscribeEvent(TestEvent.class, m1);\r\n        TestEvent event = new TestEvent();\r\n        Future<String> future = messageBus.sendEvent(event);\r\n        messageBus.complete(event, \"Success\");\r\n\r\n        assertTrue(future.isDone(), \"Future should be completed\");\r\n        assertEquals(\"Success\", future.get(1, TimeUnit.SECONDS));\r\n    }\r\n\r\n    @Test\r\n    public void testAwaitMessage() throws InterruptedException {\r\n        class TestBroadcast implements Broadcast {}\r\n\r\n        messageBus.subscribeBroadcast(TestBroadcast.class, m1);\r\n        messageBus.sendBroadcast(new TestBroadcast());\r\n\r\n        Message msg = messageBus.awaitMessage(m1);\r\n        assertTrue(msg instanceof TestBroadcast, \"Should receive TestBroadcast message\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/MessageBusTest.java b/src/test/java/MessageBusTest.java
--- a/src/test/java/MessageBusTest.java	(revision 34f9a649c49d473f394e905a171fc27a6c0a6cc3)
+++ b/src/test/java/MessageBusTest.java	(date 1736001051585)
@@ -28,7 +28,8 @@
     @Test
     public void testRegisterAndUnregister() {
         messageBus.unregister(m1);
-        assertThrows(NullPointerException.class, () -> messageBus.awaitMessage(m1));
+        assertThrows(IllegalStateException.class, () -> messageBus.awaitMessage(m1));
+
     }
 
     @Test
